// Mocks generated by Mockito 5.4.4 from annotations
// in singerapp/test/features/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:singerapp/features/data/datasources/schedule_datasource.dart'
    as _i4;
import 'package:singerapp/features/domain/models/schedule.dart' as _i3;
import 'package:singerapp/features/infra/api_service.dart' as _i6;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSchedule_1 extends _i1.SmartFake implements _i3.Schedule {
  _FakeSchedule_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ScheduleDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockScheduleDatabase extends _i1.Mock implements _i4.ScheduleDatabase {
  MockScheduleDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i5.Future<_i2.Database>);

  @override
  _i5.Future<int> update(_i3.Schedule? schedule) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [schedule],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> create(_i3.Schedule? schedule) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [schedule],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.Schedule>> readAll() => (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Schedule>>.value(<_i3.Schedule>[]),
      ) as _i5.Future<List<_i3.Schedule>>);

  @override
  _i5.Future<int> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Future<List<_i3.Schedule>> getUnsyncedSchedules() => (super.noSuchMethod(
        Invocation.method(
          #getUnsyncedSchedules,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Schedule>>.value(<_i3.Schedule>[]),
      ) as _i5.Future<List<_i3.Schedule>>);

  @override
  _i5.Future<bool> exists(int? id) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.Schedule> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Schedule>.value(_FakeSchedule_1(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Schedule>);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i6.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Schedule> createSchedule(_i3.Schedule? schedule) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSchedule,
          [schedule],
        ),
        returnValue: _i5.Future<_i3.Schedule>.value(_FakeSchedule_1(
          this,
          Invocation.method(
            #createSchedule,
            [schedule],
          ),
        )),
      ) as _i5.Future<_i3.Schedule>);

  @override
  _i5.Future<List<_i3.Schedule>> getSchedules() => (super.noSuchMethod(
        Invocation.method(
          #getSchedules,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Schedule>>.value(<_i3.Schedule>[]),
      ) as _i5.Future<List<_i3.Schedule>>);

  @override
  _i5.Future<void> deleteSchedule(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSchedule,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
